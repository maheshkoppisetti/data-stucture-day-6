1)graph ={
    '5' : ['3','7'],
    '3' : ['2','4'],
    '7' : ['8'],
    '2' : [],
    '4' : ['8'],
    '8' : []
    }
visited = []
queue = []

def bfs(visited,graph,node):
    visited.append(node)
    queue.append(node)
    while queue :
        m = queue.pop(0)
        print(m,end=" ")
        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

bfs(visited,graph,'5')


output:
5 3 7 2 4 8 

2)graph ={
    '5' : ['3','7'],
    '3' : ['2','4'],
    '7' : ['8'],
    '2' : [],
    '4' : ['8'],
    '8' : []
    }
visited = set()


def dfs(visited,graph,node):
    if node not in visited:
        print(node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited,graph,neighbour)
                

dfs(visited,graph,'5')

output:
5
3
2
4
8
7


3)'''for i in range(6,0,-1):
    print(i) '''
    
    
def bubblesort(list):
    #swap the element to arrange in order
    for i in range(len(list)-1,0,-1):
        print("i value")
        print(i)
        for j in range(i):
            #print("j value")
            print(j)
            if list[j]>list[j+1]:
                temp=list[j]
                list[j]=list[j+1]
                list[j+1]=temp
list=[10,5,-3,-2,0,100,10 ]
bubblesort(list)
print(list)
        

output:
i value
6
0
1
2
3
4
5
i value
5
0
1
2
3
4
i value
4
0
1
2
3
i value
3
0
1
2
i value
2
0
1
i value
1
0
[-3, -2, 0, 5, 10, 10, 100]


4)def insertionsort(arr):
    for i in range(1,len(arr)):
        key =arr[i]
        j=i-1
        while j>=0 and key<arr[j]:
            arr[j+1]=arr[j]
            j-=1
        arr[j+1]=key
arr=[12,11,13,5,6]
insertionsort(arr)
print("sorted array is:")
for i in range (len(arr)):
    print("%d" %arr[i])
    

output:
sorted array is:
5
6
11
12
13


5)#one more concept
b=[]
def ss(a):
    k=0
    for i in range (0,len(a)):
        k=min(a)
        b.append(k)
        a.remove(k)
a=[3,10,5,90,6]
ss(a)
print(b)


output:
[3, 5, 6, 10, 90]


6)def selection_sort(alist):
    for i in range (0,len(alist)-1):
        smallest = i
        for j in range(i+1,len(alist)):
            if alist[j]<alist[smallest]:
                smallest = j
        alist[i],alist[smallest]=alist[smallest],alist[i]
        
        
alist=input('enter the list of numbers:').split()
alist=[int(x) for x in alist]
selection_sort(alist)
print('sorted list :',end=" ")
print(alist)


output:
enter the list of numbers:34 26 78 12 6
sorted list : [6, 12, 26, 34, 78]



7)def merge_sort(unsorted_list):
    if len(unsorted_list)<=1:
        return unsorted_list
    middle=len(unsorted_list)//2
    left_list=unsorted_list[:middle]
    right_list=unsorted_list[middle:]
    left_list=merge_sort(left_list)
    right_list=merge_sort(right_list)
    return list(merge(left_list,right_list))
def merge(left_half,right_half):
    res=[]
    while len(left_half)!=0 and len(right_half)
      if left_half[0]<right_half[0]:
            res.append(left_half[0])
            left_half.remove(left_half[0])
        else:
            res.append(right_half[0])
            right_half.remove(right_half[0])
            if len(left_half)==0:
                res=res+right_half
        else:
        res=res+left_half
    
     return res
    unsorted_list=[64,34,25,12,22,11,90]
    print(merge_sort(unsorted_list))
    unsorted_list=[10,-6,34,2,100]
    print(merge_sort(unsorted_list))




8)def partition(arr,low,high):
    i=(low-1)
    pivot=arr[high]
    for j in range(low,high):
        if arr[j]<=pivot:
            i=i+1
            arr[i],arr[j]=arr[j],arr[i]
    arr[i+1],arr[high]=arr[high],arr[i+1]
    return (i+1)
def quicksort(arr,low,high):
    if low<high:
        pi=partition(arr,low,high)
        quicksort(arr,low,pi-1)
        quicksort(arr,pi+1,high)
arr=[2,5,3,8,6,5,4,7]
n=len(arr)
quicksort(arr,0,n-1)
print("sorted array is:")
for i in range(n):
    print(arr[i],end=" ")
        



output:
sorted array is:
2 3 4 5 5 6 7 8 



9)pos=-1
def search(list,n):
    l=0
    u=len(list)-1
    while 1<=u:
        mid=(1+u)//2
        if(list[mid])==n:
            globals()['pos']=mid
            return True
        else:
            if list[mid]<n:
                l=mid+1
            else:
                u=mid-1
    return False
list=[5,10,15,100]
n=167
if search(list,n):
    print("found it at position",pos+1)
else:
    print("not found")



output:
0,1,1,2,4,5,9,1,21,34,55,89,144,300,377,710
jump= sqrt(arraysize) fnding of in which block the number is present then we procede linear search

â€‹
